<?php

namespace App\Services\Telegram\Handlers\AgreementHandler\Handlers;

use App\Enums\TypeClientEnum;
use App\Repositories\ClientAgreement\DTO\ClientAgreementDTO;
use App\Services\Telegram\Handlers\AgreementHandler\AgreementInterface;
use App\Services\Telegram\Handlers\AgreementHandler\DTO\AgreementDTO;
use Closure;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Redis;

class ClientTypeHandler implements AgreementInterface
{
    public const AGR_STAGE_CLIENT_TYPE = '_CLIENT_TYPE';


    private array $replyMarkup =
        [
            'keyboard' =>
                [
                    [ //—Å—Ç—Ä–æ–∫–∞
                        [ //–∫–Ω–æ–ø–∫–∞
                            'text' => 'üë®‚Äçüíª –§—ñ–∑–∏—á–Ω–∞ –æ—Å–æ–±–∞-–ø—ñ–¥–ø—Ä–∏—î–º–µ—Ü—å',
                        ],
                        [ //–∫–Ω–æ–ø–∫–∞
                            'text' => 'üë®‚Äçüíº –§—ñ–∑–∏—á–Ω–∞ –æ—Å–æ–±–∞',
                        ],

                    ],
                ],
            'one_time_keyboard' => true,
            'resize_keyboard' => true,
        ];

    public function handle(AgreementDTO $agreementDTO, Closure $next): AgreementDTO
    {
        $key = $agreementDTO->getSenderId() . self::AGR_STAGE_CLIENT_TYPE;

        if (Redis::exists($key) == true){

            $agreementDTO->setClientAgreementDTO(new ClientAgreementDTO());
            $agreementDTO->getClientAgreementDTO()->setType(TypeClientEnum::from(Redis::get($key)));
            $agreementDTO->getClientAgreementDTO()->setTelegramId($agreementDTO->getSenderId());
            return $next($agreementDTO);
        }

        $checkValue = TypeClientEnum::tryFrom($agreementDTO->getMessage());

        if (is_null($checkValue) == true) {

            $agreementDTO->setMessage('ü§¶ –ü–æ–º–∏–ª–∫–∞ –≤–≤–æ–¥—É. –û–±–µ—Ä—ñ—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è –∑ –º–µ–Ω—é üëá');
            $agreementDTO->setReplyMarkup($this->replyMarkup);
            return $agreementDTO;
        }
        Redis::set($key, $agreementDTO->getMessage(), 'EX', 260000);

        if ($agreementDTO->getMessage() === TypeClientEnum::FOP->value){
            $agreementDTO->setMessage(
                '–ü—ñ–¥ —á–∞—Å –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏, –í–∞–º —Ç—Ä–µ–±–∞ –±—É–¥–µ –Ω–∞–¥–∞—Ç–∏ —Å–∫—Ä—ñ–Ω–∏/—Ñ–æ—Ç–æ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤:' .PHP_EOL.
                '- –í–∏—Ç—è–≥ –∑ –Ñ–î–†'.PHP_EOL.
                '- –§–æ—Ç–æ –¥–æ–≥–æ–≤–æ—Ä—É –æ—Ä–µ–Ω–¥–∏ –∞–±–æ –ø—Ä–∞–≤–∞ –≤–ª–∞—Å–Ω–æ—Å—Ç—ñ –∞–±–æ —Ç–∞–ª–æ–Ω –Ω–∞ –ú–ê–§,'.PHP_EOL.
                '–ø—Ä–∏–º—ñ—â–µ–Ω–Ω—è –≤ —è–∫–µ –ø–ª–∞–Ω—É—î—Ç—å—Å—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—Ä–µ–Ω–¥–æ–≤–∞–Ω–æ–≥–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è.'.PHP_EOL.
                '(–æ—Å–æ–±–∏—Å—Ç—ñ –¥–∞–Ω–Ω—ñ –æ—Ä–µ–Ω–¥–æ–¥–∞–≤—Ü—è –º–æ–∂–Ω–∞ –ø—Ä–∏—Ö–æ–≤–∞—Ç–∏/–∑–∞–º–∞–ª—é–≤–∞—Ç–∏)'.PHP_EOL.PHP_EOL.
                '–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –≤–∏—Ç—è–≥ –∑ –Ñ–î–† üìé'

            );
        }

        if ($agreementDTO->getMessage() === TypeClientEnum::FO->value){
            $agreementDTO->setMessage(
                '–ü—ñ–¥ —á–∞—Å –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏, –í–∞–º —Ç—Ä–µ–±–∞ –±—É–¥–µ –Ω–∞–¥–∞—Ç–∏ —Å–∫—Ä—ñ–Ω–∏/—Ñ–æ—Ç–æ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤:' .PHP_EOL.
                '- –ü–∞—Å–ø–æ—Ä—Ç 1 —ñ 2 —Å—Ç–æ—Ä—ñ–Ω–∫–∞'.PHP_EOL.
                '- –ü—Ä–æ–ø–∏—Å–∫–∞ –∞–±–æ –≤–∏—Ç—è–≥ –ø—Ä–æ–º—ñ—Å—Ü–µ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó'.PHP_EOL.
                '- –§–æ—Ç–æ –¥–æ–≥–æ–≤–æ—Ä—É –æ—Ä–µ–Ω–¥–∏ –∞–±–æ –ø—Ä–∞–≤–∞ –≤–ª–∞—Å–Ω–æ—Å—Ç—ñ –∞–±–æ —Ç–∞–ª–æ–Ω –Ω–∞ –ú–ê–§,'.PHP_EOL.
                '–ø—Ä–∏–º—ñ—â–µ–Ω–Ω—è –≤ —è–∫–µ –ø–ª–∞–Ω—É—î—Ç—å—Å—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—Ä–µ–Ω–¥–æ–≤–∞–Ω–æ–≥–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è.'.PHP_EOL.
                '(–æ—Å–æ–±–∏—Å—Ç—ñ –¥–∞–Ω–Ω—ñ –æ—Ä–µ–Ω–¥–æ–¥–∞–≤—Ü—è –º–æ–∂–Ω–∞ –ø—Ä–∏—Ö–æ–≤–∞—Ç–∏/–∑–∞–º–∞–ª—é–≤–∞—Ç–∏)'.PHP_EOL.PHP_EOL.
                '–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ñ–æ—Ç–æ –ø–µ—Ä—à–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –ø–∞—Å–ø–æ—Ä—Ç—É üìé'
            );
        }

        return $agreementDTO;
    }
}
