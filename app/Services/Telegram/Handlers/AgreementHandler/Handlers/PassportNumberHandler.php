<?php

namespace App\Services\Telegram\Handlers\AgreementHandler\Handlers;

use App\Enums\TelegramCommandEnum;
use App\Enums\TypeClientEnum;
use App\Services\Telegram\Handlers\AgreementHandler\AgreementInterface;
use App\Services\Telegram\Handlers\AgreementHandler\DTO\AgreementDTO;
use Closure;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Redis;

class PassportNumberHandler implements AgreementInterface
{
    public const AGR_PASSPORT_NUMBER = '_PASSPORT_NUMBER';


    public function handle(AgreementDTO $agreementDTO, Closure $next): AgreementDTO
    {
        if($agreementDTO->getClientAgreementDTO()->getType() === TypeClientEnum::FOP){
            return $next($agreementDTO);
        }

        $keyRedis = $agreementDTO->getSenderId() . self::AGR_PASSPORT_NUMBER;

        if (Redis::get($agreementDTO->getSenderId()) == 200
            && $agreementDTO->getMessage() == TelegramCommandEnum::agreementBack->value)
        {
            Redis::del(
                $agreementDTO->getSenderId() . PassportIssuedHandler::AGR_PASSPORT_ISSUED,
            );
            Redis::set($agreementDTO->getSenderId(), 8);

            $agreementDTO->setMessage('üí¨ –í–∫–∞–∂—ñ—Ç—å –∫–∏–º –≤–∏–¥–∞–Ω–∏–π –¥–æ–∫—É–º–µ—Ç - –Ω–æ–º–µ—Ä –∞–±–æ –Ω–∞–∑–≤—É –æ—Ä–≥–∞–Ω—É');
            $agreementDTO->setReplyMarkup($this->replyMarkup());
            return $agreementDTO;
        }

        if (Redis::exists($keyRedis) == true){
            return $next($agreementDTO);
        }

        $arrayPassport = [];
        for ($i = 0; $i < mb_strlen($agreementDTO->getMessage()); $i++){
            $arrayPassport[$i] = mb_substr($agreementDTO->getMessage(), $i, 1);
        }

        if(is_numeric($arrayPassport[0]) === false && is_numeric($arrayPassport[1]) === false){
            if (mb_strlen($agreementDTO->getMessage()) != 8){
                $agreementDTO->setMessage('ü§¶ –ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç—É –≤–∫–∞–∑–∞–Ω–æ –Ω–µ –≤—ñ—Ä–Ω–æ. –Ø–∫—â–æ —É –≤–∞—Å –Ω–µ ID –ø–∞—Å–ø–æ—Ä—Ç –≤–≤–µ–¥—ñ—Ç—å —Å–µ—Ä—ñ—é —Ç–∞ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç—É –±–µ–∑ –ø—Ä–æ–±—ñ–ª—É, 2 –ª—ñ—Ç–µ—Ä–∏ —Ç–∞ 6 —Ü–∏—Ñ—Ä, –∑–∞–≥–∞–ª–æ–º 8 –∑–Ω–∞–∫—ñ–≤, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ –°–ù112233');
                return $agreementDTO;
            }
            foreach ($arrayPassport as $key => $value){
                if ($key > 1) {
                    if (is_numeric($value) === false){
                        $agreementDTO->setMessage('ü§¶ –ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç—É –≤–∫–∞–∑–∞–Ω–æ –Ω–µ –≤—ñ—Ä–Ω–æ. –Ø–∫—â–æ —É –≤–∞—Å –Ω–µ ID –ø–∞—Å–ø–æ—Ä—Ç –≤–≤–µ–¥—ñ—Ç—å —Å–µ—Ä—ñ—é —Ç–∞ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç—É –±–µ–∑ –ø—Ä–æ–±—ñ–ª—É, 2 –ª—ñ—Ç–µ—Ä–∏ —Ç–∞ 6 —Ü–∏—Ñ—Ä, –∑–∞–≥–∞–ª–æ–º 8 –∑–Ω–∞–∫—ñ–≤, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ –°–ù112233');
                        return $agreementDTO;
                    }
                }
            }
            foreach ($arrayPassport as $key => $value){
                if ($key < 2) {
                    if ($value === mb_strtolower($value)){
                        $agreementDTO->setMessage('ü§¶ –ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç—É –≤–∫–∞–∑–∞–Ω–æ –Ω–µ –≤—ñ—Ä–Ω–æ. –Ø–∫—â–æ —É –≤–∞—Å –Ω–µ ID –ø–∞—Å–ø–æ—Ä—Ç –≤–≤–µ–¥—ñ—Ç—å —Å–µ—Ä—ñ—é —Ç–∞ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç—É –±–µ–∑ –ø—Ä–æ–±—ñ–ª—É, 2 –≤–µ–ª–∏–∫—ñ –ª—ñ—Ç–µ—Ä–∏ —Ç–∞ 6 —Ü–∏—Ñ—Ä, –∑–∞–≥–∞–ª–æ–º 8 –∑–Ω–∞–∫—ñ–≤, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ –°–ù112233');
                        return $agreementDTO;
                    }
                }
            }
            foreach ($arrayPassport as $key => $value){
                if ($key > 1) {
                    if (is_numeric($value) < 0){
                        $agreementDTO->setMessage('ü§¶ –ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç—É –≤–∫–∞–∑–∞–Ω–æ –Ω–µ –≤—ñ—Ä–Ω–æ. –Ø–∫—â–æ —É –≤–∞—Å –Ω–µ ID –ø–∞—Å–ø–æ—Ä—Ç –≤–≤–µ–¥—ñ—Ç—å —Å–µ—Ä—ñ—é —Ç–∞ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç—É –±–µ–∑ –ø—Ä–æ–±—ñ–ª—É, 2 –ª—ñ—Ç–µ—Ä–∏ —Ç–∞ 6 —Ü–∏—Ñ—Ä (–Ω–µ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –≤—ñ–¥—î–º–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏), –∑–∞–≥–∞–ª–æ–º 8 –∑–Ω–∞–∫—ñ–≤, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ –°–ù112233');
                        return $agreementDTO;
                    }
                }
            }
        }
        if(is_numeric($arrayPassport[0]) === true){
            if (count($arrayPassport) != 9){
                $agreementDTO->setMessage('ü§¶ –ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç—É –≤–∫–∞–∑–∞–Ω–æ –Ω–µ –≤—ñ—Ä–Ω–æ. –Ø–∫—â–æ —É –≤–∞—Å ID –ø–∞—Å–ø–æ—Ä—Ç –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç—É 9 —Ü–∏—Ñ—Ä, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 000111222');
                return $agreementDTO;
            }
            foreach ($arrayPassport as $value){
                if (is_numeric($value) === false){
                    $agreementDTO->setMessage('ü§¶ –ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç—É –≤–∫–∞–∑–∞–Ω–æ –Ω–µ –≤—ñ—Ä–Ω–æ. –Ø–∫—â–æ —É –≤–∞—Å ID –ø–∞—Å–ø–æ—Ä—Ç –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç—É 9 —Ü–∏—Ñ—Ä, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 000111222');
                    return $agreementDTO;
                }
            }
            foreach ($arrayPassport as $value){
                if ($value < 0){
                    $agreementDTO->setMessage('ü§¶ –ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç—É –≤–∫–∞–∑–∞–Ω–æ –Ω–µ –≤—ñ—Ä–Ω–æ. –Ø–∫—â–æ —É –≤–∞—Å ID –ø–∞—Å–ø–æ—Ä—Ç –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç—É 9 —Ü–∏—Ñ—Ä, –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥—î–º–Ω–∏–º, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 000111222');
                    return $agreementDTO;
                }
            }
        }

        Redis::set($keyRedis, $agreementDTO->getMessage(), 'EX', 260000);
        Redis::set($agreementDTO->getSenderId(), 8);
        $agreementDTO->setMessage('üí¨ –í–∫–∞–∂—ñ—Ç—å –∫–∏–º –≤–∏–¥–∞–Ω–∏–π –¥–æ–∫—É–º–µ—Ç - –Ω–æ–º–µ—Ä –∞–±–æ –Ω–∞–∑–≤—É –æ—Ä–≥–∞–Ω—É');
        $agreementDTO->setReplyMarkup($this->replyMarkup());
        return $agreementDTO;
    }

    private function replyMarkup(): array
    {
        return [
            'keyboard' =>
                [
                    [ //—Å—Ç—Ä–æ–∫–∞
                        [ //–∫–Ω–æ–ø–∫–∞
                            'text' => TelegramCommandEnum::returnMain->value,
                        ],
                        [ //–∫–Ω–æ–ø–∫–∞
                            'text' => TelegramCommandEnum::agreementBack->value,
                        ],
                    ],
                ],
            'one_time_keyboard' => true,
            'resize_keyboard' => true,
        ];
    }
}
