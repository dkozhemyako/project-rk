<?php

namespace App\Services\Telegram\Handlers\AgreementHandler\Handlers;

use App\Enums\TypeClientEnum;
use App\Services\Telegram\Handlers\AgreementHandler\AgreementInterface;
use App\Services\Telegram\Handlers\AgreementHandler\DTO\AgreementDTO;
use App\Services\Telegram\Handlers\AgreementHandler\DTO\ClientPassportDTO;
use Carbon\Carbon;
use Closure;
use Illuminate\Support\Facades\Redis;

class PassportDateHandler implements AgreementInterface
{
    public const AGR_PASSPORT_DATE = '_PASSPORT_DATE';


    public function handle(AgreementDTO $agreementDTO, Closure $next): AgreementDTO
    {
        if($agreementDTO->getClientAgreementDTO()->getType() === TypeClientEnum::FOP){
            return $next($agreementDTO);
        }

        $key = $agreementDTO->getSenderId() . self::AGR_PASSPORT_DATE;

        if (Redis::exists($key) == true){

            $agreementDTO->getClientAgreementDTO()->setPassportSeriesNumber(Redis::get($agreementDTO->getSenderId() . PassportNumberHandler::AGR_PASSPORT_NUMBER));
            $agreementDTO->getClientAgreementDTO()->setPassportIssue(Redis::get($agreementDTO->getSenderId() . PassportIssuedHandler::AGR_PASSPORT_ISSUED));
            $agreementDTO->getClientAgreementDTO()->setPassportDate(Redis::get($key));

            return $next($agreementDTO);
        }

        $arrayDate = explode( '.', $agreementDTO->getMessage());

        if (!array_key_exists(2, $arrayDate) || array_key_exists(3, $arrayDate)){
            $agreementDTO->setMessage(
                'ü§¶ –§–æ—Ä–º–∞—Ç –¥–∞—Ç–∏ –≤–∫–∞–∑–∞–Ω–æ –Ω–µ –≤—ñ—Ä–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞ –≤–∫–∞–∂—ñ—Ç—å –¥–∞—Ç—É –ø–æ–≤—Ç–æ—Ä–Ω–æ —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–† (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 31.12.2020)'
            );

            return $agreementDTO;
        }

        if ((int)$arrayDate[0] == 0 || (int)$arrayDate[0] < 0 || (int)$arrayDate[0] > 31){
            $agreementDTO->setMessage(
                'ü§¶ –ß–∏—Å–ª–æ –≤ –¥–∞—Ç—ñ –≤–∫–∞–∑–∞–Ω–æ –Ω–µ –≤—ñ—Ä–Ω–æ, –≤–æ–Ω–æ –Ω–µ –º–æ–∂–µ –¥–æ—Ä—ñ–≤–Ω—é–≤–∞—Ç–∏ –Ω—É–ª—é, –±—É—Ç–∏ –º–µ–Ω—à–µ –Ω—É–ª—è –∞–±–æ –±—ñ–ª—å—à–µ 31. –ë—É–¥—å –ª–∞—Å–∫–∞ –≤–∫–∞–∂—ñ—Ç—å –¥–∞—Ç—É –ø–æ–≤—Ç–æ—Ä–Ω–æ —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–† (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 31.12.2020)'
            );

            return $agreementDTO;
        }
        if ((int)$arrayDate[1] == 0 || (int)$arrayDate[1] < 0 || (int)$arrayDate[1] > 12){
            $agreementDTO->setMessage(
                'ü§¶ –ú—ñ—Å—è—Ü—å –≤ –¥–∞—Ç—ñ –≤–∫–∞–∑–∞–Ω–æ –Ω–µ –≤—ñ—Ä–Ω–æ, –≤—ñ–Ω –Ω–µ –º–æ–∂–µ –¥–æ—Ä—ñ–≤–Ω—é–≤–∞—Ç–∏ –Ω—É–ª—é, –±—É—Ç–∏ –º–µ–Ω—à–µ –Ω—É–ª—è –∞–±–æ –±—ñ–ª—å—à–µ 12. –ë—É–¥—å –ª–∞—Å–∫–∞ –≤–∫–∞–∂—ñ—Ç—å –¥–∞—Ç—É –ø–æ–≤—Ç–æ—Ä–Ω–æ —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–† (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 31.12.2020)'
            );

            return $agreementDTO;
        }
        $today = date ('d.m.Y', time());
        $todayYear = date('Y', time());
        if ((int)$arrayDate[2] > (int)$todayYear) {
            $agreementDTO->setMessage(
                'ü§¶ –†—ñ–∫ –≤ –¥–∞—Ç—ñ –≤–∫–∞–∑–∞–Ω–æ –Ω–µ –≤—ñ—Ä–Ω–æ, –≤—ñ–Ω –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –±—ñ–ª—å—à–∏–º –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π. –ë—É–¥—å –ª–∞—Å–∫–∞ –≤–∫–∞–∂—ñ—Ç—å –¥–∞—Ç—É –ø–æ–≤—Ç–æ—Ä–Ω–æ —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–† (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 31.12.2020)'
            );

            return $agreementDTO;
        }

        if (Carbon::rawCreateFromFormat('d.m.Y', $agreementDTO->getMessage())  >= Carbon::rawCreateFromFormat('d.m.Y', $today)) {
            $agreementDTO->setMessage(
                'ü§¶ –î–∞—Ç–∞ –≤–∫–∞–∑–∞–Ω–∞ –Ω–µ –≤—ñ—Ä–Ω–æ, –≤–æ–Ω–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –±—ñ–ª—å—à–æ—é –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é–≤–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–æ–º—É –¥–Ω—é. –ë—É–¥—å –ª–∞—Å–∫–∞ –≤–∫–∞–∂—ñ—Ç—å –¥–∞—Ç—É –ø–æ–≤—Ç–æ—Ä–Ω–æ —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–† (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 31.12.2020)'
            );

            return $agreementDTO;
        }

        Redis::set($key, $agreementDTO->getMessage(), 'EX', 260000);
        $agreementDTO->setMessage('üí¨ –í–∫–∞–∂—ñ—Ç—å –í–∞—à –Ü–ü–ù, –ø–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ 9 —Ü–∏—Ñ—Ä.');
        return $agreementDTO;
    }
}
