<?php

namespace App\Services\Telegram\Handlers\AgreementHandler\Handlers;

use App\Enums\TelegramCommandEnum;
use App\Enums\TypeClientEnum;
use App\Services\Telegram\Handlers\AgreementHandler\AgreementInterface;
use App\Services\Telegram\Handlers\AgreementHandler\DTO\AgreementDTO;
use Carbon\Carbon;
use Closure;
use Illuminate\Support\Facades\Redis;

class AgreementStartDateClient implements AgreementInterface
{
    public const AGR_START_DATE_CLIENT = '_CLIENT_START_DATE';


    public function handle(AgreementDTO $agreementDTO, Closure $next): AgreementDTO
    {
        $key = $agreementDTO->getSenderId() . self::AGR_START_DATE_CLIENT;

        if (Redis::get($agreementDTO->getSenderId()) == 6
            && $agreementDTO->getMessage() == TelegramCommandEnum::agreementBack->value) {
            Redis::del(
                $agreementDTO->getSenderId() . ClientNameHandler::AGR_STAGE_CLIENT_NAME,
            );

            Redis::set($agreementDTO->getSenderId(), 5);

            $agreementDTO->setMessage(
                'üí¨ –í–∫–∞–∂—ñ—Ç—å –ø–æ–≤–Ω—ñ—Å—Ç—é –ü–Ü–ë –æ—Ä–µ–Ω–¥–∞—Ä—è –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è.'
            );
            $agreementDTO->setReplyMarkup($this->replyMarkup());
            return $agreementDTO;
        }

        if (Redis::exists($key) == true){

            $agreementDTO->getClientAgreementDTO()->setDateFromClient(Redis::get($key));

            return $next($agreementDTO);
        }

        $arrayDate = explode( '.', $agreementDTO->getMessage());

        if (!array_key_exists(2, $arrayDate) || array_key_exists(3, $arrayDate)){
            $agreementDTO->setMessage(
                'ü§¶ –§–æ—Ä–º–∞—Ç –¥–∞—Ç–∏ –≤–∫–∞–∑–∞–Ω–æ –Ω–µ –≤—ñ—Ä–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞ –≤–∫–∞–∂—ñ—Ç—å –¥–∞—Ç—É –ø–æ–≤—Ç–æ—Ä–Ω–æ —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–† (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 31.12.2024)'
            );

            return $agreementDTO;
        }

        if ((int)$arrayDate[0] == 0 || (int)$arrayDate[0] < 0 || (int)$arrayDate[0] > 31){
            $agreementDTO->setMessage(
                'ü§¶ –ß–∏—Å–ª–æ –≤ –¥–∞—Ç—ñ –≤–∫–∞–∑–∞–Ω–æ –Ω–µ –≤—ñ—Ä–Ω–æ, –≤–æ–Ω–æ –Ω–µ –º–æ–∂–µ –¥–æ—Ä—ñ–≤–Ω—é–≤–∞—Ç–∏ –Ω—É–ª—é, –±—É—Ç–∏ –º–µ–Ω—à–µ –Ω—É–ª—è –∞–±–æ –±—ñ–ª—å—à–µ 31. –ë—É–¥—å –ª–∞—Å–∫–∞ –≤–∫–∞–∂—ñ—Ç—å –¥–∞—Ç—É –ø–æ–≤—Ç–æ—Ä–Ω–æ —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–† (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 31.12.2024)'
            );

            return $agreementDTO;
        }
        if ((int)$arrayDate[1] == 0 || (int)$arrayDate[1] < 0 || (int)$arrayDate[1] > 12){
            $agreementDTO->setMessage(
                'ü§¶ –ú—ñ—Å—è—Ü—å –≤ –¥–∞—Ç—ñ –≤–∫–∞–∑–∞–Ω–æ –Ω–µ –≤—ñ—Ä–Ω–æ, –≤—ñ–Ω –Ω–µ –º–æ–∂–µ –¥–æ—Ä—ñ–≤–Ω—é–≤–∞—Ç–∏ –Ω—É–ª—é, –±—É—Ç–∏ –º–µ–Ω—à–µ –Ω—É–ª—è –∞–±–æ –±—ñ–ª—å—à–µ 12. –ë—É–¥—å –ª–∞—Å–∫–∞ –≤–∫–∞–∂—ñ—Ç—å –¥–∞—Ç—É –ø–æ–≤—Ç–æ—Ä–Ω–æ —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–† (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 31.12.2024)'
            );

            return $agreementDTO;
        }

        if (mb_strlen($arrayDate[0]) > 2 || mb_strlen($arrayDate[1]) > 2 || mb_strlen($arrayDate[2]) > 4){
            $agreementDTO->setMessage(
                'ü§¶ –î–∞—Ç–∞ –≤–∫–∞–∑–∞–Ω–∞ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ —á–∏ –Ω–µ–º–∞ –∑–∞–π–≤–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤ –∞–±–æ —ó—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ. –ë—É–¥—å –ª–∞—Å–∫–∞ –≤–∫–∞–∂—ñ—Ç—å –¥–∞—Ç—É –ø–æ–≤—Ç–æ—Ä–Ω–æ —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–† (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 31.12.2024)'
            );

            return $agreementDTO;
        }

        $today = date ('d.m.Y', time());
        $todayYear = date('Y', time());
        if ((int)$arrayDate[2] < (int)$todayYear) {
            $agreementDTO->setMessage(
                'ü§¶ –†—ñ–∫ –≤ –¥–∞—Ç—ñ –≤–∫–∞–∑–∞–Ω–æ –Ω–µ –≤—ñ—Ä–Ω–æ, –≤—ñ–Ω –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –º–µ–Ω—à–∏–º –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π. –ë—É–¥—å –ª–∞—Å–∫–∞ –≤–∫–∞–∂—ñ—Ç—å –¥–∞—Ç—É –ø–æ–≤—Ç–æ—Ä–Ω–æ —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–† (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 31.12.2024)'
            );

            return $agreementDTO;
        }

        if (Carbon::createFromFormat('d.m.Y', $agreementDTO->getMessage()) < Carbon::createFromFormat('d.m.Y', $today)) {
            $agreementDTO->setMessage(
                'ü§¶ –î–∞—Ç–∞ –≤–∫–∞–∑–∞–Ω–∞ –Ω–µ –≤—ñ—Ä–Ω–æ, –≤–æ–Ω–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –º–µ–Ω—à–æ—é –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π –¥–µ–Ω—å. –ë—É–¥—å –ª–∞—Å–∫–∞ –≤–∫–∞–∂—ñ—Ç—å –¥–∞—Ç—É –ø–æ–≤—Ç–æ—Ä–Ω–æ —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–† (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 31.12.2024)'
            );

            return $agreementDTO;
        }

        Redis::set($key, $agreementDTO->getMessage(), 'EX', 260000);
        Redis::set($agreementDTO->getSenderId(), 5);

        $agreementDTO->setMessage(
            'üí¨ –í–∫–∞–∂—ñ—Ç—å –ø–æ–≤–Ω—ñ—Å—Ç—é –ü–Ü–ë –æ—Ä–µ–Ω–¥–∞—Ä—è –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è.'
        );
        $agreementDTO->setReplyMarkup($this->replyMarkup());
        return $agreementDTO;
    }

    private function replyMarkup(): array
    {
        return [
            'keyboard' =>
                [
                    [ //—Å—Ç—Ä–æ–∫–∞
                        [ //–∫–Ω–æ–ø–∫–∞
                            'text' => TelegramCommandEnum::returnMain->value,
                        ],
                        [ //–∫–Ω–æ–ø–∫–∞
                            'text' => TelegramCommandEnum::agreementBack->value,
                        ],
                    ],
                ],
            'one_time_keyboard' => true,
            'resize_keyboard' => true,
            ];
    }
}
