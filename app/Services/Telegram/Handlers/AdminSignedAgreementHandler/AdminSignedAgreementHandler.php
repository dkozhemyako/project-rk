<?php

namespace App\Services\Telegram\Handlers\AdminSignedAgreementHandler;

use App\Enums\TelegramCommandEnum;
use App\Repositories\AdminAgreement\AdminAgreementRepository;
use App\Repositories\ClientAgreement\ClientAgreementRepository;
use App\Services\Messenger\MessageDTO;
use App\Services\Messenger\TelegramMessenger\TelegramMessengerService;
use App\Services\Telegram\CommandsInterface;
use App\Services\Telegram\Handlers\AdminAgreementHandler\DTO\AdminAgreementDTO;
use GuzzleHttp\Exception\GuzzleException;
use Illuminate\Support\Facades\Redis;
use Illuminate\Support\Facades\Storage;


class AdminSignedAgreementHandler implements CommandsInterface
{
    public function __construct(
        protected AdminAgreementRepository $adminAgreementRepository,
        protected ClientAgreementRepository $clientAgreementRepository,
        protected TelegramMessengerService $messengerService,
    ){}

    public const ADM_SIGNED_STAGE = '_ADM_SIGNED_STAGE';

    /**
     * @throws GuzzleException
     */
    public function handle(string $message, int $senderId, string $fileName, int $callback, int $mediaGroupId): MessageDTO
    {
        $key = $senderId . self::ADM_SIGNED_STAGE;
        $dto = new AdminAgreementDTO(
            $callback,
            $message,
            $senderId,
            $fileName
        );

        if ($dto->getFileName() === ''){
            Redis::set($key, $callback, 'EX', 260000);
            return new MessageDTO(
                'ü§¶ –í–∏ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∏ –∂–æ–¥–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç—É, –ø–æ–≤—Ç–æ—Ä—ñ—Ç—å —Å–ø—Ä–æ–±—É. –ù–µ–æ–±—Ö—ñ–¥–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π —Ñ–∞–π–ª –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è–º .p7s',
                $dto->getSenderId()

            );
        }

        $zip = explode('.',$dto->getFileName());
        if (trim(end($zip)) != 'p7s'){
            return new MessageDTO(
                'ü§¶ –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª—É. –ù–µ–æ–±—Ö—ñ–¥–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è–º .p7s',
                $dto->getSenderId()
            );
        }

        if (Redis::exists($key) == true) {

            $callback = Redis::get($key);
            $clientInfo = $this->clientAgreementRepository->getClientFilesById($callback);

            $newFileName = 'adm_signed_' . $clientInfo->getName() . '.docx.p7s';
            Storage::disk('public')->move($dto->getFileName(), $newFileName);

            $this->adminAgreementRepository->updateSignedAgreement($callback, $newFileName);

            $result = $this->clientAgreementRepository->getClientTelegramIdById($callback);
            $clientId = $result['0']->telegram_id; //–Ω–µ –≤–∞—Ä–∏–∞–Ω—Ç, —Ä–∞–∑–æ–±—Ä–∞—Ç—Å—è —Å –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏

            $message = 'üí¨ –í—ñ—Ç–∞—é, –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –≤–∞–º –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π –¥–æ–≥–æ–≤—ñ—Ä –æ—Ä–µ–Ω–¥–æ–¥–∞–≤—Ü–µ–º.'.PHP_EOL;
            $message .= '–î–ª—è —Ç–æ–≥–æ —â–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π –¥–æ–≥–æ–≤—ñ—Ä –ø–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º - https://ca.diia.gov.ua/verify'.PHP_EOL;
            $message .= '–î–ª—è —Ç–æ–≥–æ —â–æ–± –ø—ñ–¥–ø–∏—Å–∞—Ç–∏ –¥–æ–≥–æ–≤—ñ—Ä –æ—Ä–µ–Ω–¥–∏ –ø–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –æ—Ç—Ä–∏–º–∞–Ω–∏–π —Ñ–∞–π–ª - https://ca.diia.gov.ua/sign'.PHP_EOL;
            $message .= '–î–∞–ª—ñ —Å–ª—ñ–¥—É–π—Ç–µ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è–º —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –∑ –ø—ñ–¥–ø–∏—Å–æ–º, —Ñ–∞–π–ª –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è–º .p7s'.PHP_EOL.PHP_EOL;
            $message .= '–ü—ñ—Å–ª—è –ø—ñ–¥–ø–∏—Å—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ üëá —Ç–∞ —Å–ª—ñ–¥—É–π—Ç–µ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è–º.'.PHP_EOL;

            $ClientDto = new MessageDTO(
                $message,
                $clientId,
            );
            $ClientDto->setReplyMarkup($this->replyMarkup($callback));
            $this->messengerService->send($ClientDto);

            $clientInstructionMsg = new MessageDTO(
                "<a href='https://www.youtube.com/watch?v=PeB_6qHbT3M'>–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤—ñ–¥–µ–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é –ø—ñ–¥–ø–∏—Å—É</a>",
                $clientId,
            );
            $clientInstructionMsg->setParseMode('HTML');
            $clientInstructionMsg->setReplyMarkup($this->replyMarkupMain());
            $this->messengerService->send($clientInstructionMsg);
            //

            $arrayQuery = array(
                'chat_id' => $clientId,
                'caption' => '–î–æ–≥–æ–≤—ñ—Ä –¥–ª—è –ø—ñ–¥–ø–∏—Å—É',
                'document' => curl_file_create(storage_path('app/public/'.$newFileName))
            );
            $ch = curl_init('https://api.telegram.org/bot'. config('messenger.telegram.token') .'/sendDocument');
            curl_setopt($ch, CURLOPT_POST, 1);
            curl_setopt($ch, CURLOPT_POSTFIELDS, $arrayQuery);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($ch, CURLOPT_HEADER, false);
            curl_exec($ch);
            curl_close($ch);
            /*
            $dtoFile = new MessageDTO(
                config('messenger.telegram.ngrok').'/storage/'.$adminAgreementDTO->getFileName(), //–∫—Ä–∞—â–µ –ø–µ—Ä–µ—Ä–æ–±–∏—Ç–∏
                $clientId,
            );
            $dtoFile->setReplyMarkup(['caption' => '–î–æ–≥–æ–≤—ñ—Ä –¥–ª—è –ø—ñ–¥–ø–∏—Å—É']); //–∫—Ä–∞—â–µ –ø–µ—Ä–µ—Ä–æ–±–∏—Ç–∏

            $this->messengerService->send($dtoFile);
            */

            Redis::del($key);
            return new MessageDTO(
                'üí¨ –î–æ–≥–æ–≤—ñ—Ä –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª—ñ—î–Ω—Ç—É –¥–ª—è –ø—ñ–¥–ø–∏—Å—É, –æ—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–∏.',
                $dto->getSenderId()
            );
        }

        return new MessageDTO(
            'üí¨ –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.',
            $dto->getSenderId()
        );
    }

    private function replyMarkup(int $agreementId): array
    {
        return
            [
                'inline_keyboard' =>
                    [
                        [ //—Å—Ç—Ä–æ–∫–∞
                            [ //–∫–Ω–æ–ø–∫–∞
                                'text' => TelegramCommandEnum::clientAgreement->value,
                                'callback_data' => $agreementId,
                            ],
                        ],
                    ],
                'one_time_keyboard' => true,
                'resize_keyboard' => true,
            ];
    }

    private function replyMarkupMain(): array
    {
        return
            [
                'keyboard' =>
                    [
                        [ //—Å—Ç—Ä–æ–∫–∞
                            [ //–∫–Ω–æ–ø–∫–∞
                                'text' => TelegramCommandEnum::returnMain->value,

                            ],
                        ],
                    ],
                'one_time_keyboard' => true,
                'resize_keyboard' => true,
            ];
    }

}
